raport do zadania 4 z PWS LAB
autor: Maciek Makowski (189188)
20.06.2001

1. Testy

* Środowisko testowe: komputer wyposażony w procesor AMD Athlon 800 i 224 MB RAM pracującym pod kontrolą systemu Debian GNU/Linux (jądro 2.4.3)
* czasy były mierzone przy użyciu funkcji gettimeofday()
* wszystkie testy zostały przeprowadzone na wersjach kopiujących dodatkowy komunikat do przestrzeni adresowej procesu (kontekstu wątku). Ze względu na implementację mechanizmów wątków i pamięci dzielonej w moim rozwiązaniu przeprowadzanie testów bez kopiowania było bezcelowe, gdyż w powyższych mechanizmach zastosowałem pełne buforowanie, czyli proces piszący nigdy nie oczekiwał na zwolnienie się miejsca na komunikat, a co za tym idzie jedyne opóźnienie na które miał wpływ dodatkowy komunikat związane było właśnie z kopiowaniem komunikatu. Można więc przyjąć, że w implementacji bez kopiowania komunikatu wyniki są takie same, jak przy komunikacie o długości 0.
* dla każdej metody komunikacje przeprowadziłem 4 rodzaje testów:
1. dużej liczby procesów przy minimalnym obciążeniu jednego procesu (N = 2, D = 250)
2. minimalnej liczby procesów przy dużym obciążeniu jednego procesu (N = 250, D = 2)
3. dużej liczby procesów przy średnim obciążeniu jednego procesu (N = 25, D = 250)
4. średniej liczby procesów przy dużym obciążeniu jednego procesu (N = 250, D = 25)
* każdy z powyższych testów został przeprowadzony dla długości dodatkowego komunikatu wynoszących 0, 1000 i 2000.
* każdy z testów został uruchomiony siedem razy - wartości w tabeli poniżej stanowią średnią ze wszystkich uruchomień

wyniki testów:

nr | (N, D)    | L    | wątki           | pamięć dzielona | fifo
---+-----------+------+-----------------+-----------------+-----------------
1. | (2, 250)  | 0    |   546       (2) |   478       (2) |   365      (50) 
   |           | 1000 |   719       (2) |   694       (3) |   471      (70) 
   |           | 2000 |   877       (2) |   911       (3) |   531      (80) 
---+-----------+------+-----------------+-----------------+-----------------
2. | (250, 2)  | 0    |   352       (2) |   798      (10) |   476     (200) 
   |           | 1000 |  2558     (200) |  3411      (50) |   800     (200) 
   |           | 2000 |  5084     (200) |  6133      (30) |  1303     (200)
---+-----------+------+-----------------+-----------------+-----------------
3. | (25, 250) | 0    |   675       (2) |  2818      (30) |  1215     (100) 
   |           | 1000 |  2694     (200) |  5277      (60) |  2062     (400) 
   |           | 2000 |  4510     (300) |  7751      (30) |  2876     (700) 
---+-----------+------+-----------------+-----------------+-----------------
4. | (250, 25) | 0    |   687       (2) |  1914      (80) |  1540      (30) 
   |           | 1000 |  5080     (500) |  6970     (300) |  2879     (700) 
   |           | 2000 | 10874     (300) | 12361    (1000) |  4476     (500) 

* czasy podane są w dziesięciotysiecznych częściach sekundy
* w nawiasach podane jest maksymalne zaobserwowane odchylenie od średniej wartości

2. Komentarz

Wyniki implementacji na wątkach i przy użyciu pamięci dzielonej są, zgodnie z przewidywaniami, porównywalne. Zastrzec wypadałoby jedynie, że wątki działają znacząco lepiej od pamięci dzielonej w przypadku dużej liczby krótkich komunikatów (testy 3 i 4 bez dodatkowego komunikatu); poza tym w większosci przypadków wątki komunikowały się nieznacznie szybciej.
Wyjątkowa jest natomiast szybkość łącz nazwanych; o ile w przypadku krótkich komunikatów (znów testy 3 i 4 bez dodatkowego komunikatu) fifo wypada gorzej od wątków (choć lepiej od pamięci dzielonej), to w przypadku dużej liczby długich komunikatów jest bezkonkurencyjna.
Czas potrzebny na komunikację jest w przypadku każdej z metod liniowo zależny od rozmiaru komunikatu - w tym przypadku żaden ze sposobów komunikacji nie jest faworyzowany.
Porównanie wyników testów 2 i 4 dostarcza nam informacji o tym, jak wpływa zwiększenie liczby komunikujących się procesów na czas obliczeń. W przypadku wątków i pamięci dzielonej ponad dziesięciokrotne zwiększenie liczby procesów wydłużyło czas obliczeń zaledwie dwukrotnie; w przypadku fifo takie samo zwiększenie liczby procesów doprowadziło do pięciokrotnego wydłużenia czasu obliczeń.

3. Podsumowanie

zdecydowanym liderem są łącza nazwane, w niektórych jednak przypadkach - w szczególności dużej liczby procesów z kórych każdy wysyła dużo krótkich komunikatów - należy rozważyć użycie wątków. Kompletnym przegranym jest natomiast pamięć dzielona - wypadła najgorzej we wszystkich testach. Dodatkowo kłopotliwa implementacja tego mechanizmu przemawia za korzystaniem z innych metod komunikacji między procesami.

